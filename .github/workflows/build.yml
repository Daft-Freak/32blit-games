name: Build

on:
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:

  build:

    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: Linux
            cache-key: linux
            cmake-args: -D32BLIT_DIR=$GITHUB_WORKSPACE/32blit-sdk
            apt-packages: ccache libsdl2-dev libsdl2-image-dev libsdl2-net-dev

          - os: ubuntu-20.04
            name: STM32
            cache-key: stm32
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/32blit-sdk/32blit.toolchain
            apt-packages: ccache
            arm-toolchain: true

    runs-on: ${{matrix.os}}

    steps:
    # Check out the main repo
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: main
        submodules: recursive

    # Check out the 32Blit API we build against
    - name: Checkout 32Blit API
      uses: actions/checkout@v3
      with:
        repository: 32blit/32blit-sdk
        path: 32blit-sdk

    - name: Cache
      uses: actions/cache@v3
      with:
        path: /home/runner/.ccache
        key: ccache-${{matrix.cache-key}}-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-${{matrix.cache-key}}-${{github.ref}}
          ccache-${{matrix.cache-key}}-

    # Linux dependencies
    - name: Install Linux deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update && sudo apt install ${{matrix.apt-packages}}
        pip3 install 32blit

    - name: Install ARM Toolchain
      if: matrix.arm-toolchain
      working-directory: ${{runner.workspace}}
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
        tar xf gcc-*.tar.bz2
        cd gcc*/bin
        pwd >> $GITHUB_PATH

    # Ask cmake to build the makefiles
    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/main
      run: python3 ./run-all.py cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ${{matrix.cmake-args}}

    # And then run the build itself
    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/main
      run: |
        ccache --zero-stats
        python3 ./run-all.py cmake --build build --config $BUILD_TYPE -j 2
        ccache --show-stats -v

