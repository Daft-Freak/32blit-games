name: Build

on:
  pull_request:
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:

  build:

    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: Linux
            cache-key: linux
            cmake-args: -D32BLIT_DIR=$GITHUB_WORKSPACE/32blit-sdk
            apt-packages: ccache libsdl2-dev libsdl2-image-dev libsdl2-net-dev python3-setuptools

          - os: ubuntu-20.04
            name: STM32
            cache-key: stm32
            cmake-args: -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/32blit-sdk/32blit.toolchain
            apt-packages: ccache gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib python3-setuptools

    runs-on: ${{matrix.os}}

    steps:
    # Check out the main repo
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: main
        submodules: true

    # Check out the 32Blit API we build against
    - name: Checkout 32Blit API
      uses: actions/checkout@v3
      with:
        repository: 32blit/32blit-sdk
        path: 32blit-sdk

    - name: Cache
      uses: actions/cache@v3
      with:
        path: /home/runner/.ccache
        key: ccache-${{matrix.cache-key}}-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-${{matrix.cache-key}}-${{github.ref}}
          ccache-${{matrix.cache-key}}-

    # Linux dependencies
    - name: Install Linux deps
      if: runner.os == 'Linux'
      run: |
        sudo apt update && sudo apt install ${{matrix.apt-packages}}
        pip3 install 32blit

    # Set up the cmake build environment
    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/main/build

    # Ask cmake to build the makefiles
    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/main/build
      run: ${{matrix.cmake-prefix}} cmake $GITHUB_WORKSPACE/main -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_PACKAGE_FILE_NAME=${{env.RELEASE_FILE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ${{matrix.cmake-args}}

    # And then run the build itself
    - name: Build
      working-directory: ${{runner.workspace}}/main/build
      shell: bash
      run: |
        ccache --zero-stats
        cmake --build . --config $BUILD_TYPE -j 2
        ccache --show-stats

